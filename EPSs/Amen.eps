%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 21.12.0 (http://poppler.freedesktop.org)
%%Creator: TeX
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 290 43
%%HiResBoundingBox: 0 0 290 43
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
%%BeginResource: font BZZZZZ+EBGaramond-Regular
/BZZZZZ+EBGaramond-Regular_sfnts [
<00010000000b0080000300306376742000000000000000bc000000006670676d
00000000000000bc00000000676c796600130539000000bc000004bc68656164
1aef02a40000057800000036686865610c94053e000005b000000024686d7478
0d4100d7000005d40000001c6c6f6361000012ec000005f0000000206d617870
002d048a00000610000000207072657068068c85000006300000000776686561
000203e90000063800000024766d747803e800000000065c0000001000>
<00020032000001c201d90003000700007311211125211121320190fea2012cfe
d401d9fe2732017500>
<0002fffefffb02b902ae005a006b0000572226353436373636373e0337363637
3636373636373632171616171e03171e02171616151406232226262322220623
22263534363736363534262627262623232206070e0315141617161514062322
2623220613333235342627272623220707061514161b0d1011101a2c101c2f2a
2d19050801091209090703010301020302183431290c0e2023141110100d0e30
36171328220c0d10140d211c0d1208020b0ebd040904030e0e0a221821100d0d
321c213ed19b0e01014e060302065b020b050706070b0508202540706c75450e
1c100306060618040102040c064c9e93752428281004030d0706040303010606
070a020518100f3941190803070b0a2b302605161d06090b06050206011f0502
0503f41211f506020502000000>
<0001001d00aa00f500ff00100000772235343637363637321615140607060623
0609073060300305090c2d5daa06112401070d050303132102070d0000>
<00010018fffd02f301ae008a0000572226353436373636353534262726263534
373e023736363332151406151417333636333216173336363332161615151416
1716161514062322262623220606232226353436373636353534262623220607
0615151416171616151406232226262322060623222635343637363635353426
2623220607061515141617161615140623222626232206062c080c0d0a0e1d0c
1a0405081b20191202040306050202174b3a24301003205231212c171c0f0a0d
090b1416131211161814090b0d0a101b162416192b131c1e0f0a0d0a0a141715
1211161814080c0f080f1d162416192b131b1c0f080f0b091417141211151703
0407070603050d14d71b29040106060a02070f130b010307072b0e0a02162d1f
261d28284023d5140d050306070605030202030506080602040e14d2182b1c0c
0f1632ce140e040207070605030202030506080503050d14d2182b1c0c0f1434
ce140d0503050806050302020300000000>
<0002001efff1016d019e00230033000057222626353436363332161615142323
22061514161633323637363633321514070e0203333236373636353426232206
061514d537522e355834283e231ed30e0b2a462a1e311304040308120f2a3277
5b18221005033323172e1e0f3663413a5f3a2039251f0f16304f2f171605030a
1317131c0f012f0203010b0a1d291b28140a000000>
<00010018fffd01f901ae005c0000572226353436373636353534262726263534
3736363736363332161514061514161736363332161515141617161615140623
2226262322060623222635343637363635353426272206070606151514161716
15140623222626232206062c090b0c0b0f1c0b1a040609232c15030503020305
0101234f2f31401c0f080f0e061416141211161714050f0f080f1c3129243615
04041c0f170a0a14171412111517030506080503040e14d71b26070205060b01
091a1002030403072b0e0407012122503bd5140d050307080603030202030306
080703050d14d22c31011711040d06f1140e04060a0605030202030000>
<0001003cfff200aa0060000b0000572226353436333216151406731621211617
20200e21161720201716210000>
<0001000000010042ce1060735f0f3cf5000303e800000000d61672bb00000000
dd1f4c2efedefebc09c403d900000006000200010000000000>
<0001000003effed6000009f6fedefc6a09c40001000000000000000000000000
0000000700>
<01f4003202b4fffe0112001d030a00180186001e0210001800e6003c00>
<00000000000000280000015400000190000003000000039400000490000004bc00>
<000100000007024400170244000700010000000000000000000000000007000100>
<b801ff85b0048d0000>
<0001000000000000000003e80000000000000000000100000000000000000000
0000000100>
<03e8000000000000000000000000000000>
] def
10 dict begin
/FontName /BZZZZZ+EBGaramond-Regular_00 def
/FontType 42 def
/FontMatrix [1 0 0 1 0 0] def
/FontBBox [-290 -324 2500 985] def
/PaintType 0 def
/sfnts BZZZZZ+EBGaramond-Regular_sfnts def
/Encoding 256 array
dup 0 /c00 put
dup 1 /c01 put
dup 2 /c02 put
dup 3 /c03 put
dup 4 /c04 put
dup 5 /c05 put
dup 6 /c06 put
readonly def
/CharStrings 257 dict dup begin
/.notdef 0 def
/c00 0 def
/c01 1 def
/c02 2 def
/c03 3 def
/c04 4 def
/c05 5 def
/c06 6 def
end readonly def
FontName currentdict end definefont pop
16 dict begin
/FontName /BZZZZZ+EBGaramond-Regular def
/FontType 0 def
/FontMatrix [1 0 0 1 0 0] def
/FMapType 2 def
/Encoding [
0
] def
/FDepVector [
/BZZZZZ+EBGaramond-Regular_00 findfont
] def
FontName currentdict end definefont pop
%%EndResource
/F9_0 /BZZZZZ+EBGaramond-Regular 0 pdfMakeFont16
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 290 43 re
W
q
q
[1 0 0 1 1 -605] cm
q
[1 0 0 1 0 0] cm
0 0 288 648 re
W
[1 0 0 -1 0 648] cm
q
[1 0 0 1 0 0] cm
[0.75 0 0 0.75 0 0] cm
q
0 0 384 61.5438 re
W
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
Q
q
[1 0 0 1 0 23.2438] cm
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
Q
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
[0 0 0] SC
0.8 w
4 M
0 j
0 J
[] 0 d
0 -15 m
384 -15 l
f
0 -15 m
384 -15 l
S
Q
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
[0 0 0] SC
0.8 w
4 M
0 j
0 J
[] 0 d
0 -5 m
384 -5 l
f
0 -5 m
384 -5 l
S
Q
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
[0 0 0] SC
0.8 w
4 M
0 j
0 J
[] 0 d
0 5 m
384 5 l
f
0 5 m
384 5 l
S
Q
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
/DeviceRGB {} CS
[0 0 0] SC
[0 0 0] SC
0.8 w
4 M
0 j
0 J
[] 0 d
0 15 m
384 15 l
f
0 15 m
384 15 l
S
Q
Q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 -15] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
0 98.406 m
0 -97.688 l
0 -118 5.99 -134.275 17.97 -146.516 c
29.948 -158.756 45.573 -164.876 64.844 -164.876 c
75.781 -164.876 84.374 -161.75 90.624 -155.5 c
96.874 -149.25 100 -140.917 100 -130.5 c
100 -22.687 l
93.75 -28.157 l
89.583 -31.802 83.463 -35.577 75.39 -39.484 c
67.318 -43.391 58.594 -45.344 49.22 -45.344 c
37.76 -45.344 27.734 -40.917 19.14 -32.062 c
10.547 -23.208 6.25 -12.532 6.25 -0.032 c
6.25 12.468 10.547 23.276 19.14 32.391 c
27.734 41.506 37.76 46.063 49.22 46.063 c
58.594 46.063 67.318 44.241 75.39 40.595 c
83.463 36.949 89.583 33.303 93.75 29.657 c
100 23.407 l
100 132 l
100 141.896 96.875 150.1 90.625 156.61 c
84.375 163.12 75.781 166.375 64.845 166.375 c
45.573 166.375 29.948 160.125 17.969 147.625 c
5.99 135.125 0 118.72 0 98.405 c
0 98.406 l
h
f
Q
Q
Q
Q
Q
q
[1 0 0 1 15 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
[1 0 0 1 0 0] Tm
0 0 Td
0 Tr
[1 0 0 -1 -2.166667 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\001)
[9.342
0] Tj
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
[1 0 0 1 0 0] Tm
0 0 Td
0 Tr
[1 0 0 -1 7.175333 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\002)
[3.699
0] Tj
Q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 2.5 10] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
0 -60.906 m
33.333 -60.906 50 -51.271 50 -32 c
50 62.53 l
39.062 51.595 22.396 46.126 0 46.126 c
-22.396 46.126 -39.063 51.596 -50 62.532 c
-50 -32 l
-50 -51.27 -33.333 -60.906 0 -60.906 c
h
f
Q
Q
Q
q
[1 0 0 1 7.5 5] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
0 -60.906 m
33.333 -60.906 50 -51.271 50 -32 c
50 62.53 l
39.062 51.595 22.396 46.126 0 46.126 c
-22.396 46.126 -39.063 51.596 -50 62.532 c
-50 -32 l
-50 -51.27 -33.333 -60.906 0 -60.906 c
h
f
Q
Q
Q
q
[1 0 0 1 12.5 10] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
0 -60.906 m
33.333 -60.906 50 -51.271 50 -32 c
50 62.53 l
39.062 51.595 22.396 46.126 0 46.126 c
-22.396 46.126 -39.063 51.596 -50 62.532 c
-50 -32 l
-50 -51.27 -33.333 -60.906 0 -60.906 c
h
f
Q
Q
Q
Q
Q
q
[1 0 0 1 40 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
[1 0 0 1 0 0] Tm
0 0 Td
0 Tr
[1 0 0 -1 -10.633333 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\003)
[10.503
0] Tj
[1 0 0 -1 -0.130333 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\004)
[5.265
0] Tj
[1 0 0 -1 5.134667 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\005)
[7.128
0] Tj
[1 0 0 -1 12.262667 33.45] Tm
0 0 Td
/F9_0 13.5 Tf
(\000\006)
[3.105
0] Tj
Q
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 2.5 15] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
-4.688 -30.28 m
17.708 -30.28 29.948 -30.542 32.032 -31.062 c
37.76 -32.625 40.625 -36.272 40.625 -42 c
50 -42 l
50 55.656 l
50 58.26 48.698 59.823 46.094 60.344 c
40.884 60.864 24.739 61.124 -2.344 61.124 c
-26.302 61.124 -40.884 60.864 -46.094 60.344 c
-48.698 60.344 -50 59.042 -50 56.438 c
-50 -25.594 l
-50 -29.24 -48.698 -31.062 -46.094 -31.062 c
-43.75 -31.062 l
-41.146 -30.542 -28.125 -30.282 -4.687 -30.282 c
-4.688 -30.28 l
h
f
Q
Q
Q
q
[1 0 0 1 5 10] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
-46.094 -63.78 m
-32.552 -63.78 -21.484 -61.307 -12.891 -56.36 c
-4.298 -51.41 0 -43.99 0 -34.093 c
0 62 l
-9.375 62 l
-9.375 51.062 -11.979 42.86 -17.187 37.39 c
-22.397 31.922 -32.031 29.187 -46.094 29.188 c
-64.324 29.188 -79.427 33.354 -91.406 41.688 c
-91.406 -34.094 l
-91.406 -53.884 -76.302 -63.781 -46.094 -63.781 c
-46.094 -63.78 l
h
f
Q
Q
Q
q
[1 0 0 1 5.1 18.75] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
47.478 -24 m
54.435 -24 60.271 -21.712 64.968 -17.117 c
69.662 -12.52 72 -6.904 72 -0.267 c
72 6.373 69.663 12.085 64.967 16.851 c
60.27 21.618 54.435 24 47.477 24 c
41.217 24 35.729 21.617 31.033 16.85 c
26.337 12.086 24 6.374 24 -0.265 c
24 -6.903 26.337 -12.52 31.033 -17.115 c
35.73 -21.713 41.217 -24 47.478 -24 c
h
f
Q
Q
Q
q
[1 0 0 1 5.1 10] cm
q
[0.05 0 0 0.05 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
47.478 -24 m
54.435 -24 60.271 -21.712 64.968 -17.117 c
69.662 -12.52 72 -6.904 72 -0.267 c
72 6.373 69.663 12.085 64.967 16.851 c
60.27 21.618 54.435 24 47.477 24 c
41.217 24 35.729 21.617 31.033 16.85 c
26.337 12.086 24 6.374 24 -0.265 c
24 -6.903 26.337 -12.52 31.033 -17.115 c
35.73 -21.713 41.217 -24 47.478 -24 c
h
f
Q
Q
Q
Q
Q
q
[1 0 0 1 57.5 0] cm
q
[1 0 0 1 0 0] cm
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
0 -15 0.8 30 re
f
Q
q
[1 0 0 1 0 0] cm
/DeviceRGB {} cs
[0 0 0] sc
[0 0 0] sc
4.2 -15 0.8 30 re
f
Q
Q
Q
Q
Q
Q
Q
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%+ font BZZZZZ+EBGaramond-Regular
%%EOF
